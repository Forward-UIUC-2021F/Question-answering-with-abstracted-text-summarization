In computer science, a data structure is a data organization, management, and storage format that enables efficient access and modification.[1][2][3] More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data,[4] i.e., it is an algebraic structure about data.
Data structures serve as the basis for abstract data types (ADT). The ADT defines the logical form of the data type. The data structure implements the physical form of the data type.[5]
Different types of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, relational databases commonly use B-tree indexes for data retrieval,[6] while compiler implementations usually use hash tables to look up identifiers.[7]
Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms. Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Data structures can be used to organize the storage and retrieval of information stored in both main memory and secondary memory.[8]
Data structures are generally based on the ability of a computer to fetch and store data at any place in its memory, specified by a pointer—a bit string, representing a memory address, that can be itself stored in memory and manipulated by the program. Thus, the array and record data structures are based on computing the addresses of data items with arithmetic operations, while the linked data structures are based on storing addresses of data items within the structure itself. 
The implementation of a data structure usually requires writing a set of procedures that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This observation motivates the theoretical concept of an abstract data type, a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and time cost).[9]
There are numerous types of data structures, generally built upon simpler primitive data types:[10]
In addition, hashes, graphs and binary trees are other commonly used data structures.
Most assembly languages and some low-level languages, such as BCPL (Basic Combined Programming Language), lack built-in support for data structures. On the other hand, many high-level programming languages and some higher-level assembly languages, such as MASM, have special syntax or other built-in support for certain data structures, such as records and arrays. For example, the C (a direct descendant of BCPL) and Pascal languages support structs and records, respectively, in addition to vectors (one-dimensional arrays) and multi-dimensional arrays.[12][13]
Most programming languages feature some sort of library mechanism that allows data structure implementations to be reused by different programs. Modern languages usually come with standard libraries that implement the most common data structures. Examples are the C++ Standard Template Library, the Java Collections Framework, and the Microsoft .NET Framework.
Modern languages also generally support modular programming, the separation between the interface of a library module and its implementation. Some provide opaque data types that allow clients to hide implementation details. Object-oriented programming languages, such as C++, Java, and Smalltalk, typically use classes for this purpose.
Many known data structures have concurrent versions which allow multiple computing threads to access a single concrete instance of a data structure simultaneously.[14]

A data structure is a particular way of organizing data in a computer so that it can be used effectively.For example, we can store a list of items having the same data-type using the array data structure.This page contains detailed tutorials on different data structures (DS) with topic-wise problems.All Articles of Linked ListQuiz on Linked ListCoding Practice on Linked ListRecent Articles on Linked ListQuiz on StackAll Articles on StackCoding Practice on StackRecent Articles on StackQuiz on QueueAll Articles on QueueCoding Practice on QueueRecent Articles on QueueQuiz on Binary TreeQuiz on Binary Tree TraversalsAll articles on Binary TreeCoding Practice on Binary TreeRecent Articles on TreeQuiz on Binary Search TreesQuiz on Balanced Binary Search TreesAll Articles on Binary Search TreeCoding Practice on Binary Search TreeRecent Articles on BSTAll Articles on HeapQuiz on HeapCoding Practice on HeapRecent Articles on HeapQuiz on HashingAll Articles on HashingCoding Practice on HashingRecent Articles on HashingAll Articles on Graph Data StructureQuiz on GraphQuiz on Graph TraversalsQuiz on Graph Shortest PathsQuiz on Graph Minimum Spanning TreeCoding Practice on GraphRecent Articles on GraphAll Articles on TrieBinary Indexed Tree:All Articles on Binary Indexed TreeSuffix Array and Suffix Tree:All Articles on Suffix TreeAVL Tree:Recent Articles on Advanced Data Structures.All Articles on ArrayCoding Practice on ArrayQuiz on ArrayCoding Practice on ArrayRecent Articles on ArrayAll Articles on MatrixCoding Practice on MatrixRecent Articles on Matrix.1. Language Foundation Courses [C++ / JAVA / Python ]Learn any programming language from scratch and understand all its fundamentals concepts for a strong programming foundation in the easiest possible manner with help of GeeksforGeeks Language Foundation Courses – Java Foundation | Python Foundation | C++ Foundation2. Geeks Classes LiveGet interview-centric live online classes on Data Structure and Algorithms from any geographical location to learn and master DSA concepts for enhancing your problem-solving & programming skills and to crack the interview of any product-based company – Geeks Classes: Live Session3. Complete Interview PreparationGet fulfilled all your interview preparation needs at a single place with the Complete Interview Preparation Course that provides you all the required stuff to prepare for any product-based, service-based, or start-up company at the most affordable prices.4. DSA Self PacedStart learning Data Structures and Algorithms to prepare for the interviews of top IT giants like Microsoft, Amazon, Adobe, etc. with DSA Self-Paced Course where you will get to learn and master DSA from basic to advanced level and that too at your own pace and convenience.5. Company Specific Courses – Amazon, Microsoft, TCS & WiproCrack the interview of any product-based giant company by specifically preparing with the questions that these companies usually ask in their coding interview round. Refer GeeksforGeeks Company Specific Courses: Amazon SDE Test Series, etc.Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.
Data Structures (DS) tutorial provides basic and advanced concepts of Data Structure. Our Data Structure tutorial is designed for beginners and professionals.Data Structure is a way to store and organize data so that it can be used efficiently.Our Data Structure tutorial includes all topics of Data Structure such as Array, Pointer, Structure, Linked List, Stack, Queue, Graph, Searching, Sorting, Programs, etc.The data structure name indicates itself that organizing the data in memory. There are many ways of organizing the data in the memory as we have already seen one of the data structures, i.e., array in C language. Array is a collection of memory elements in which data is stored sequentially, i.e., one after another. In other words, we can say that array stores the elements in a continuous manner. This organization of data is done with the help of an array of data structures. There are also other ways to organize the data in memory. Let's see the different types of data structures.The data structure is not any programming language like C, C++, java, etc. It is a set of algorithms that we can use in any programming language to structure the data in the memory.To structure the data in memory, 'n' number of algorithms were proposed, and all these algorithms are known as Abstract data types. These abstract data types are the set of rules.There are two types of data structures:The primitive data structures are primitive data types. The int, char, float, double, and pointer are the primitive data structures that can hold a single value.The non-primitive data structure is divided into two types:The arrangement of data in a sequential manner is known as a linear data structure. The data structures used for this purpose are Arrays, Linked list, Stacks, and Queues. In these data structures, one element is connected to only one another element in a linear form.When one element is connected to the 'n' number of elements known as a non-linear data structure. The best example is trees and graphs. In this case, the elements are arranged in a random manner.We will discuss the above data structures in brief in the coming topics. Now, we will see the common operations that we can perform on these data structures.Data structures can also be classified as:The major or the common operations that can be performed on the data structures are:A data structure is a way of organizing the data so that it can be used efficiently. Here, we have used the word efficiently, which in terms of both the space and time. For example, a stack is an ADT (Abstract data type) which uses either arrays or linked list data structure for the implementation. Therefore, we conclude that we require some data structure to implement a particular ADT.An ADT tells what is to be done and data structure tells how it is to be done. In other words, we can say that ADT gives us the blueprint while data structure provides the implementation part. Now the question arises: how can one get to know which data structure to be used for a particular ADT?.As the different data structures can be implemented in a particular ADT, but the different implementations are compared for time and space. For example, the Stack ADT can be implemented by both Arrays and linked list. Suppose the array is providing time efficiency while the linked list is providing space efficiency, so the one which is the best suited for the current user's requirements will be selected.The following are the advantages of a data structure:Before learning Data Structure, you must have the basic knowledge of C.Our Data Structure tutorial is designed to help beginners and professionals.We assure that you will not find any problem in this Data Structure tutorial. But if there is any mistake, please post it in the contact form.JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week© Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
In this Data structure tutorial for beginners you will learn about: As the name indicates, Data Structure is used for organizing the data in memory. There are various ways of organizing the data in the memory for eg. array, list, stack, queue and many more.Data structure isn’t a programming language like C, C++, java, etc. It is a set of algorithms that can be used in any programming language to organize the data in the memory.‘n’ number of algorithms were proposed to organize the data in memory. These algorithms are referred to as Abstract data types. Abstract data types are nothing but a set of rules.As applications are becoming more complex and the amount of data is increasing day by day, which may cause problems with processing speed, searching data, handling multiple requests etc. Data structure provides a way of organizing, managing, and storing data efficiently. With the help of data structure, the data items can be traversed easily. Data structure provides efficiency, reusability and abstraction. It plays an important role in enhancing the performance of a program because the main function of the program is to store and retrieve the user’s data as fast as possible.There are 2 types of Data Structure :Primitive Data Structures directly operate according to the machine instructions. These are the primitive data types. Data types like int, char, float, double, and pointer are the primitive data structures that can hold a single value.Non-primitive data structures are complex data structures that are derived from primitive data structures. Non – Primitive data types are further divided into two categories.Linear Data Structure consists of data elements arranged in a sequential manner where every element is connected to its previous and next element. This connection helps to traverse a linear arrangement in a single level and in a single run. Such data structures are easy to implement as memory is additionally sequential. Some examples of Linear Data Structure are List, Queue, Stack, Array etc.An array is a collection of similar data elements stored at contiguous memory locations. It is the simplest data structure where each data element can be accessed directly by only using its index number. Linked list is a linear data structure which is used to maintain a list-like structure in the computer memory. It is a group of nodes that are not stored at contiguous locations. Each node of the list is linked to its adjacent node with the help of pointers.Stack is a linear data structure that follows a specific order during which the operations are performed. The order could be FILO (First In Last Out) or LIFO (Last In First Out).Queue is a linear data structure in which elements can be inserted from only one end which is known as rear and deleted from another end known as front. It follows the FIFO (First In First Out) order.Non – Linear Data Structure – Non-linear Data Structures do not have any set sequence of connecting all its elements and every element can have multiple paths to attach to other elements. Such data structures support multi-level storage and sometimes can’t be traversed in a single run. Such data structures aren’t easy to implement but are more efficient in utilizing memory. Some examples of non-linear data structures are Tree, BST, Graphs etc.Tree is a multilevel data structure defined as a set of nodes.  The topmost node is named root node while the bottom most nodes are called leaf nodes. Each node has only one parent but can have multiple children.A graph is a pictorial representation of a set of objects connected by links known as edges. The interconnected nodes are represented by points named vertices, and the links that connect the vertices are called edges.A graph is a pair of sets (V, E), where V is the set of vertices and E is the set of edges.Data Structure can be further classified as Static Data Structures are data structures where the size is allocated at the compile time.Hence, the maximum size is fixed and cannot be changed.Dynamic Data Structures are data structures where the size is allocated at the run time. Hence, the maximum size is flexible and can be changed as per requirement.The common operations that can be performed on the data structures are as follows :Please enter an answer in digits:Great Learning is an ed-tech company that offers impactful and industry-relevant programs in high-growth areas. With a strong presence across the globe, we have empowered 10,000+ learners from over 50 countries in achieving positive outcomes for their careers.  Know More© 2021 Great Learning All rights reserved
      Get access to free blogs and industry reports from India's most trusted
      educational platform
    
      Get access to free blogs and industry reports from India's most trusted
      educational platform
    
A data structure is a specialized format for organizing, processing, retrieving and storing data. There are several basic and advanced types of data structures, all designed to arrange data to suit a specific purpose. Data structures make it easy for users to access and work with the data they need in appropriate ways. Most importantly, data structures frame the organization of information so that machines and humans can better understand it.In computer science and computer programming, a data structure may be selected or designed to store data for the purpose of using it with various algorithms. In some cases, the algorithm's basic operations are tightly coupled to the data structure's design. Each data structure contains information about the data values, relationships between the data and -- in some cases -- functions that can be applied to the data.For instance, in an object-oriented programming language, the data structure and its associated methods are bound together as part of a class definition. In non-object-oriented languages, there may be functions defined to work with the data structure, but they are not technically part of the data structure.Typical base data types, such as integers or floating-point values, that are available in most computer programming languages are generally insufficient to capture the logical intent for data processing and use. Yet applications that ingest, manipulate and produce information must understand how data should be organized to simplify processing. Data structures bring together the data elements in a logical way and facilitate the effective use, persistence and sharing of data. They provide a formal model that describes the way the data elements are organized.Data structures are the building blocks for more sophisticated applications. They are designed by composing data elements into a logical unit representing an abstract data type that has relevance to the algorithm or application. An example of an abstract data type is a "customer name" that is composed of the character strings for "first name," "middle name" and "last name."It is not only important to use data structures, but it is also important to choose the proper data structure for each task. Choosing an ill-suited data structure could result in slow runtimes or unresponsive code. Five factors to consider when picking a data structure include the following:In general, data structures are used to implement the physical forms of abstract data types. Data structures are a crucial part of designing efficient software. They also play a critical role in algorithm design and how those algorithms are used within computer programs.Early programming languages -- such as Fortran, C and C++ -- enabled programmers to define their own data structures. Today, many programming languages include an extensive collection of built-in data structures to organize code and information. For example, Python lists and dictionaries, and JavaScript arrays and objects are common coding structures used for storing and retrieving information.Software engineers use algorithms that are tightly coupled with the data structures -- such as lists, queues and mappings from one set of values to another. This approach can be fused in a variety of applications, including managing collections of records in a relational database and creating an index of those records using a data structure called a binary tree.Some examples of how data structures are used include the following:Data structures are often classified by their characteristics. The following three characteristics are examples:If data structures are the building blocks of algorithms and computer programs, the primitive -- or base -- data types are the building blocks of data structures. The typical base data types include the following:The data structure type used in a particular situation is determined by the type of operations that will be required or the kinds of algorithms that will be applied. The various data structure types include the following:These are considered complex data structures as they can store large amounts of interconnected data.When choosing a data structure for a program or application, developers should consider the answers to the following three questions:The data storytelling vendor revealed that it has reached an agreement to be acquired by Salesforce and will then become part of ...The vendor completed its Series F round, and has more than doubled its valuation from $1.95 billion in August 2019 when it last ...Frustrated after winning silver in the 200 meters at the 2004 and 2008 Olympics, the sprinter used analytics to identify ...Learn more about these three big data frameworks and what use case best suits each one. You might also examine options such as ...High-performance computing requires specialized hardware to collect data, and a software framework to help sort and process that ...Kyndryl, the IBM services spinoff, debuted this week amidst varying analyst opinions as to how it would fare. Kyndryl CTO Antoine...The cloud data vendor’s winter release updates its data platform with new capabilities to enable organizations to query and ...Connecting disparate sources of data for analytics and machine learning gets faster in the vendor’s latest platform update, ...Apollo GraphQL is updating its graph federation capabilities as its users outline how they are using the technology to enable ...Think you're ready for the AWS Certified Solutions Architect certification exam? Test your knowledge with these 12 questions, and...Amazon said its van monitoring system is designed solely for driver safety. But many industry experts have concerns regarding the...Amazon would like to strengthen its global footprint, but the e-commerce giant faces roadblocks and challenges today that did not...The Supreme Court ruled 6-2 that Java APIs used in Android phones are not subject to American copyright law, ending a ...This handbook looks at what Oracle Autonomous Database offers to Oracle users and issues that organizations should consider ...Oracle Autonomous Database can automate routine administrative and operational tasks for DBAs and improve productivity, but ...As organizations plan enterprise content management strategies, challenges may arise -- like cost, security and storage. Careful ...OpenText intends to acquire Zix email security technology to broaden its portfolio, adds developer tools and connects OneDrive ...Analyst: Latest features added to Acquia's marketing, commerce and customer data platform offerings show the company is serious ...Microsoft released a security update to shut down a publicly exploited vulnerability in the beleaguered on-premises messaging ...A switch to PowerShell 7 will bring performance benefits along with expanded functionality to help administrators keep pace with ...Need to work with remote Linux systems? A PowerShell module with file-handling functionality can help Windows shops looking for a...All Rights Reserved, 
Copyright 2005 - 2021, TechTarget


Privacy Policy



Cookie Preferences 



Do Not Sell My Personal Info

Our editors will review what you’ve submitted and determine whether to revise the article.data structure,  way in which data are stored for efficient search and retrieval. Different data structures are suited for different problems. Some data structures are useful for simple general problems, such as retrieving data that has been stored with a specific identifier. For example, an online dictionary can be structured so that it can retrieve the definition of a word. On the other hand, specialized data structures have been devised to solve complex specific search problems.The simplest data structure is the one-dimensional (linear) array, in which stored elements are numbered with consecutive integers and contents are accessed by these numbers. Data items stored nonconsecutively in memory may be linked by pointers (memory addresses stored with items to indicate where the “next” item or items in the structure are located). Many algorithms have been developed for sorting data efficiently; these apply to structures residing in main memory and also to structures that constitute information systems and databases. More-complex data structures may incorporate elements of simpler data structures.